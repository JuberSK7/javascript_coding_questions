Questions 1 : Create react notification toast pop-up


import React, { useState, useEffect } from "react";
import "./styles.css";

export default function App() {
  const [toast, setToast] = useState(false);

  const Toast = ({ toatsText, handleClick, handleClose }) => {
    return (
      <>
        <div
          style={{
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            width: "200px",
            border: "1px solid black",
            padding: "8px 8px",
            backgroundColor: "purple",
            color: "#fff",
            position: "absolute",
            right: "0px",
            top: "0px",
          }}
        >
          <p>{toatsText}</p>
          <p onClick={handleClose}>X</p>
        </div>
      </>
    );
  };

  const handleClick = () => {
    setToast(true);
  };

  const handleClose = () => {
    setToast(false);
  };

  useEffect(() => {
    if (toast === true) {
      setTimeout(() => {
        setToast(false);
      }, 5000);
    }
  }, [toast]);
  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      <div>
        <button onClick={handleClick}>Open Toast</button>
      </div>
      {toast && (
        <Toast
          toatsText={"This is Toast"}
          handleClose={handleClose}
          handleClick={handleClick}
        />
      )}
    </div>
  );
}

 Question 2: Create CRUD Opration with form validation.

import React, { useState } from "react";

import "./App.css";

function App() {
  const [students, setStudents] = useState([]);

  const [name, setName] = useState("");

  const [grade, setGrade] = useState("");

  const [editIndex, setEditIndex] = useState(null);

  const handleAddOrUpdateStudent = (e) => {
    e.preventDefault();
    if (!name || !grade) {
      alert("You might have missed name or grade..!");
      return;
    }
    if (editIndex !== null) {
      const tempStudents = [...students];
      console.log(tempStudents);
      tempStudents.splice(editIndex, 1, { name, grade });
      setStudents(tempStudents);
      setName("");
      setGrade("");
      setEditIndex(null);
    } else {
      setStudents([...students, { name, grade }]);
      setName("");
      setGrade("");
    }

    // Add your code here to handle adding or updating a student
  };

  const handleEdit = (index) => {
    setEditIndex(index);
    setName(students[index].name);
    setGrade(students[index].grade);
    // Add your code here to handle editing a student
  };

  const handleDelete = (index) => {
    // Add your code here to handle deleting a student
    const newStudents = students.filter((student, fIndex) => fIndex !== index);
    setStudents(newStudents);
  };

  return (
    <div className="App">
      <h1>Student Grades Management</h1>

      <form onSubmit={handleAddOrUpdateStudent}>
        <input
          type="text"
          placeholder="Student Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />

        <input
          type="text"
          placeholder="Grade"
          value={grade}
          onChange={(e) => setGrade(e.target.value)}
        />

        <button type="submit" onClick={handleAddOrUpdateStudent}>
          {editIndex !== null ? "Update" : "Add"} Student
        </button>
      </form>

      <table>
        <thead>
          <tr>
            <th>Name</th>

            <th>Grade</th>

            <th>Actions</th>
          </tr>
        </thead>

        <tbody>
          {students.map((student, index) => (
            <tr key={index}>
              <td>{student.name}</td>

              <td>{student.grade}</td>

              <td>
                <button onClick={() => handleEdit(index)}>Edit</button>

                <button onClick={() => handleDelete(index)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default App;

